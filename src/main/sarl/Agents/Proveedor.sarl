/** 
 * 
 */
package Agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import Events.buscarProductos
import Events.acceptProposal
import Objects.Product
import io.sarl.core.DefaultContextInteractions
import Events.*
import java.util.List
import io.sarl.core.Schedules
import java.util.Random
import io.sarl.core.Lifecycle

/** 
 * @author Daniel
 * 
 */
agent Proveedor {
	uses Logging
	uses DefaultContextInteractions
	uses Schedules
	uses Lifecycle
	
	var productos: List<Product>
	
	@SuppressWarnings("java_style_type_cast")
	on Initialize{
		productos = occurrence.parameters.get(0) as List<Product>
	}
	
	on buscarProductos {
		var r = new Random()
		
		for (p : productos) {	 	
			
		 if(p.getCodigo().contains(occurrence.codigo)) {
		 	emit(new Bid(p))
			//Thread::sleep(1000)
		 	}
		 	
		 
		}
	
	}
	
	on acceptProposal [isMe(occurrence.id)] {
		for (p : productos) {
			if(p.getCodigo().equals(occurrence.codigo)) {
				generarTrackingCode()
			}
		}
	}
	
	def generarTrackingCode{
		var rm = new Random()
		var trackingcode= ""
		
		for (var i = 0; i < 20; i++) {
			trackingcode += (rm.nextInt(91) + 65) as char
		}
		
		emit(new deliver(trackingcode))
	}
	
}
