/** 
 * 
 */
package Agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import Events.solicitudPed
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import Events.buscarProductos
import java.util.UUID
import Events.Bid
import Events.sendProposal

/** 
 * @author Daniel
 * 
 */
agent Broker {
	uses Logging
	uses DefaultContextInteractions
	uses Schedules

	var idAgente: UUID=null
	var mejorPrecio:float=0
	
	on Initialize {
		println("-----------------------")
		println("Soy mercado libre con ganas de hacerte la guita.")
		println("Listo para ganar platita")
		println("-----------------------")
	}

	on solicitudPed{
		println("Quiere un "+occurrence.codigo+" papu.")
		buscarProd(occurrence.codigo)
	}
	
	def buscarProd(c:String) {
		if (defaultSpace.participants.size > 3) {
			emit(new buscarProductos(c))
		} else {
			in(2000)[buscarProd(c)]
		}
		
		in(10000)[emit(new sendProposal(mejorPrecio))]
	}
	
	
	on Bid{		
		var total = occurrence.precio+occurrence.envio
		if(total>this.mejorPrecio){
		 mejorPrecio= total
		 idAgente= occurrence.getSource().getUUID()
		}
	}
	
	
}
