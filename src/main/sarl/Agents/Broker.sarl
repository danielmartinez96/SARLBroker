/** 
 * 
 */
package Agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import Events.solicitudPed
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import java.util.UUID
import Events.*
import java.util.List
import Objects.Product
import java.util.HashMap

/** 
 * @author Daniel
 * 
 */
agent Broker {
	uses Logging
	uses DefaultContextInteractions
	uses Schedules

	var productos : HashMap<Product, UUID> = newHashMap()
	on Initialize {
		println("-----------------------")
		println("Soy mercado libre")

		println("-----------------------")
	}

	on solicitudPed{
		println("Quiere un "+occurrence.codigo)
		buscarProd(occurrence.codigo)
	}
	
	def buscarProd(c:String) {
		if (defaultSpace.participants.size > 3) {
			emit(new buscarProductos(c))
		} else {
			in(2000)[buscarProd(c)]
		}
		
		in(10000)[emit(new sendProposal(productos.keySet().toList()))]
	}

	on Bid {	
		
		 evaluatePrice(occurrence.producto, occurrence.getSource().getUUID())
		   	
	}

	synchronized def evaluatePrice(producto : Product,id:UUID) {
		
				var b = true
				
				println(id +" antes "+productos)
				
				for (p : productos.keySet()) {
					if (p.getCodigo() == producto.getCodigo() &&
						producto.getTotal() <= p.getTotal()) {						
						productos.remove(p)
						productos.put(producto, id)
					} else if (p.getCodigo() == producto.getCodigo()) {
						b = false
					}
				}
				
				
				if (b) {
					productos.put(producto, id)
				}
				
			    println(id + " despues " + productos)
	
	}
	
	
	
	on selectProduct{
		emit(new acceptProposal(productos.get(occurrence.product), occurrence.product.codigo))
	}
	
	on deliver{
		emit(new giveTrackingCode(occurrence.trackingCode))
	}
	
}
